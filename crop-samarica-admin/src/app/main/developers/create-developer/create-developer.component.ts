import { Component } from '@angular/core';
import { DeveloperService } from '../../../services/developer.service';
import { ToasterService } from '../../../services/toaster.service';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import {
  FormBuilder,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { DeveloperRoles, Developers } from '../../../models/Developers';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { CommonModule } from '@angular/common';
import { MatChipsModule } from '@angular/material/chips';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

@Component({
  selector: 'app-create-developer',
  standalone: true,
  imports: [
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatDialogModule,
    MatChipsModule,
    CommonModule,
    MatProgressSpinnerModule,
    ReactiveFormsModule,
    FormsModule,
  ],
  templateUrl: './create-developer.component.html',
  styleUrl: './create-developer.component.scss',
})
export class CreateDeveloperComponent {
  loading = false;
  developerForm$: FormGroup;
  roles = Object.values(DeveloperRoles);
  constructor(
    private developerService: DeveloperService,
    private toastr: ToasterService,
    private dialogRef: MatDialogRef<CreateDeveloperComponent>,
    private fb: FormBuilder
  ) {
    this.developerForm$ = this.fb.group({
      name: ['', [Validators.required]],
      profile: ['', [Validators.required]],
      email: ['', [Validators.required, Validators.email]],
      roles: [[]], // initially empty array
    });
  }

  toggleRole(role: DeveloperRoles) {
    const selectedRoles = this.developerForm$.get('roles')?.value || [];
    if (selectedRoles.includes(role)) {
      this.developerForm$
        .get('roles')
        ?.setValue(selectedRoles.filter((r: DeveloperRoles) => r !== role));
    } else {
      this.developerForm$.get('roles')?.setValue([...selectedRoles, role]);
    }
  }

  isRoleSelected(role: DeveloperRoles): boolean {
    return this.developerForm$.get('roles')?.value.includes(role);
  }

  submit() {
    if (this.developerForm$.invalid) {
      this.toastr.error('Please complete all required fields.');
      return;
    }

    this.loading = true;
    const newDeveloper: Developers = {
      id: crypto.randomUUID(), // or generated by backend
      ...this.developerForm$.value,
    };

    this.developerService
      .create(newDeveloper)
      .then(() => {
        this.toastr.success('Developer created successfully!');
        this.dialogRef.close(true);
      })
      .catch((err) => {
        this.toastr.error(err?.message || 'Failed to create developer.');
        this.loading = false;
      });
  }

  close() {
    this.dialogRef.close(false);
  }
}
